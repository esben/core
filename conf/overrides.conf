OVERRIDES = "local\
:MACHINE_${MACHINE}\
:DISTRO_${DISTRO}\
:TARGET_CPU_FAMILIES:TARGET_CPU_${TARGET_CPU}:TARGET_OS_${TARGET_OS}\
:HOST_CPU_FAMILIES:HOST_CPU_${HOST_CPU}:HOST_OS_${HOST_OS}\
:BUILD_CPU_FAMILIES:BUILD_CPU_${BUILD_CPU}:BUILD_OS_${BUILD_OS}\
:${RECIPE_TYPE}\
"
#TARGET_OVERRIDES = ":TARGET_CPU_${TARGET_CPU}:TARGET_OS_${TARGET_OS}"
#TARGET_OVERRIDES:native = ""

addhook early_overrides_fixup to post_conf_parse
def early_overrides_fixup(d):
    overrides = (d.get("OVERRIDES", 0) or "").split(":")
    overrides_changed = False
    machine = d.get("MACHINE")
    distro = d.get("DISTRO")
    for override in overrides:
        if override == "MACHINE_${MACHINE}" and not machine:
            overrides.remove("MACHINE_${MACHINE}")
            overrides_changed = True
            continue
        if override == "DISTRO_${DISTRO}" and not distro:
            overrides.remove("DISTRO_${DISTRO}")
            overrides_changed = True
            continue
    if overrides_changed:
        d.set("OVERRIDES", ":".join(overrides))
    return

addhook late_overrides_fixup to post_recipe_parse first
def late_overrides_fixup(d):
    overrides = (d.get("OVERRIDES", 0) or "").split(":")
    overrides_changed = False
    if (d.get("TARGET_ARCH") != d.get("MACHINE_ARCH") and
        "MACHINE_${MACHINE}" in overrides):
        overrides.remove("MACHINE_${MACHINE}")
    for type in ('HOST', 'TARGET'):
        real_type = d.get(type + '_TYPE').upper()
        families = d.get(real_type + '_CPU_FAMILIES')
        index = overrides.index(type + '_CPU_FAMILIES')
        del overrides[index]
        if families:
            d.set(type + '_CPU_FAMILIES', families)
            families = families.split()
            families.reverse()
            for family in families:
                overrides.insert(index, type + '_CPU_${%s_CPU}_%s'%
                                 (type, family))
    d.set("OVERRIDES", ":".join(overrides))
    return
