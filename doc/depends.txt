Dependencies
============

Dependencies, items and provides.


Three types of dependencies
---------------------------

There are three different type of dependencies in OE-lite, which are defined
by 3 different variables:

* Build-time dependencies
* Run-time dependencies
* Fetch-time dependencies



Recipe dependencies
-------------------

A recipe can have fetch-time, build-time as well as run-time dependencies.  It
is rather uncommon to have both build-time and run-time dependencies in the
same recipe though.

Each type of recipe dependency is defined by the union of two variables, and
is used by a corresponding _stage_ task.

The purpose of a _stage_ task is to build up a _stage_ directory, containing
the corresponding dependencies.

.Dependency variables
[options="header"]
[frame="topbot",grid="none"]
|======================================================================
| Dependency | Dependency variables      | Stage task | Stage directory
| Build-time | DEPENDS / CLASS_DEPENDS   | stage      | WORKDIR/stage
| Run-time   | RDEPENDS / CLASS_RDEPENDS | rstage     | WORKDIR/rstage
| Fetch-time | FDEPENDS / CLASS_FDEPENDS | fstage     | WORKDIR/fstage
|======================================================================



Dependency items
----------------

In the lack of a better word, each part of a dependency specification is
called an +item+ in OE-lite. For example:

----
DEPENDS = "foo libbar"
----

The build-time dependency is composed of the "foo" +item+ and the "libbar"
item.

When specifying a dependency +item+, it can be prefixed with a type.  For
example:

----
DEPENDS = "native:foo"
----

which specifies a dependency on +native:foo+, meaning the foo +item+ of
+native+ type.

The available item types, corresponding to the similarly names recipe and
package types, are

* native
* cross
* machine
* sdk-cros
* sdk
* canadian-cross

and a number of alias item types

* build
* host
* target
* host-cross
* target-cross

The alias item types are mapped to one of the 6 real item types listed first,
depending on the context that the +item+ is used in.  Using +host:foo+ in a
+native+ context will be mapped to +native:foo+, while it will be mapped to
+machine:foo+ when used in a +machine+ context.

Item types (including alias item types) can also be forbidden in some
contexts.

See the +TYPEMAP+ dictionary in the +lib/oelite/item.py+ file in OE-lite/core
for more details on this context sensitive item type mapping.



Package provides
----------------

When resolving dependencies, the items are resolved against packages, or
rather against the _provides_ of packages.  A package _provides_ one or more
items.  A package always _provides_ the full name of the package.  Additional
package _provides_ is defined by package specific PROVIDES variables. For
example:

----
PROVIDES_${PN} = "hello"
PROVIDES_${PN}-bar = "world"
----

For recipe foo, this would mean that the foo package provides two items: +foo+
and +hello+, and the foo-bar package provides two items: +foo-bar+ and
+world+.


Package dependencies
--------------------

Packages can also have dependencies, and these are also specified seperately
for each dependency type.  For example:

----
DEPENDS_${PN}-libfoo = "libbar"
----

Which specifies that the +$${PN}-libfoo+ package build-time depends on the
+libbar+ item.


Recursive dependency resolving
------------------------------

When resolving recipe dependencies, the corresponding package dependencies are
also resolved.

Take a recipe with

----
DEPENDS = "libfoo"
----

And the +libfoo+ item is resolved to be provided by the +foobar-libfoo+
package from the +foobar+ recipe.

The +foobar+ recipe has

----
DEPENDS_${PN}-libfoo = "libbar"
----

Which causes the resolver to continue with resolving the +libbar+ item.  The
+libbar+ item might be resolved to the +helloworld-libhello+ package from the
+helloworld+ recipe.

The fully resolved build-time dependency list is then the packages:

* +foobar-libfoo+
* +helloworld-libhello+

and the recipes:

* +foobar+
* +helloworld+



Stage tasks
-----------
anchor:depends-stage-tasks[]

A stage task is responsible for building up the stage directory with all the
required dependencies.

To accomplish this, the stage task depends on the +package+ task of all
recipes providing packages that is selected when resolving the recipe
depdendencies.

When run, the stage task unpacks all the packages from the resolved dependency
list into the stage directory.



Provider selection
------------------

Each package (which provides one or more items), has a priority.

When multiple providers for the same item exists, the package with the highest
priority is chosen.

If more than one provider has the highest priority, and all these packages has
the same name, the one with the highest version number is chosen.

In all other situations, the provider selection throws an exception (ie. you
wil get a failure).


Package priority
----------------

The priority of a package is defined by the sum of the package priority and
the layer priority.

The package priority is controlled with the +PRIORITY+ metadata variable, and
package specific variables such as +PRIORITY_hello-libbar+ for the
hello-libbar package.

The layer priority of a package is set based on the layer that the recipe
lives in.  Each layer (as specified in conf/bakery.conf) are given a
+LAYER_PRIORITY+, with the bottom layer at +LAYER_PRIORITY=0+.

In conf/layer.conf, you can configure a number of variables:

----
PRIORITY_MAX			= "90"
PRIORITY_MIN			= "-9"
RECIPE_PREFERENCE_PRIORITY	= "2"
PACKAGE_PREFERENCE_PRIORITY	= "3"
----

The +PRIORITY_MAX+ is the maximum value allowed for +PRIORITY+ in that layer.

The +PRIORITY_MIN+ is the minimum value allowed for +PRIORITY+ in that layer.

The last two are used internally when the +prefer+ command is used to prefer a
specific version of a recipe or package.

The +LAYER_PRIORITY+ values are given in chunks of 100, with each layer given
enough space to allow for setting +PRIORITY+ in the range from +PRIORITY_MIN+
to +PRIORITY_MAX+.

NOTE: An offset is used internally, so that a +PRIORITY+ set to the value
specified by +PRIORITY_MIN+ will result in a priority of +LAYER_PRIORITY+, a
+PRIORITY+ set to 0 (zero) will result in a priority of
+LAYER_PRIORITY++++(-PRIORITY-MIN+1+++)+, and a +PRIORITY+ set to
+PRIORITY_MAX+ will result in a priority of
+LAYER_PRIORITY++++(-PRIORITY-MIN+1)+PRIORITY+++_MAX+.

Provider preferences
~~~~~~~~~~~~~~~~~~~~

When multiple providers exists for the same item, you might want to influence
the selection of which provider to choose.

In able to do this, you can use the +prefer+ command, fx. in your machine or
distro configuration files, or perhaps in local.conf.

For example:

----
prefer recipe linux-imx
----

Will raise the priority of all packages from recipe(s) with the name linux-imx
to a priority higher than any non-preferred recipes.

To prefer only specific packages from a recipe instead of all packages from
it, you can use something like

----
prefer package hello-libfoo,hello-libbar recipe hello
----

To prefer a specific version of a recipe, you can use

----
prefer recipe linux-imx version 3.9.3
----

To prefer a recipe from a specific layer

----
prefer recipe linux-imx layer meta/imx
----

The +prefer+ command support all combinations of +package+, +recipe+, +layer+,
and +version+.

Packages preferred with +prefer package ...+ are given a higher priority than
packages preferred with +prefer recipe ...+

NOTE: Internally, two extra layers are used two handle recipe and package
preferences.  Preferred recipes will get their +LAYER_PRIORITY+ changed to the
priority of the extra layer for preferred recipes.  Preffered packages, will
get their package specific +LAYER_PRIORITY+ changed to the priority of the
extra layer for preferred packages.  This way, the provider selection is kept
as a simple selection of the package with the highest priority.
