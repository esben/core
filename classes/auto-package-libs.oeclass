## Multilibrary split functionality class
##
## If having a package that contains multiple libs, then this class may be
## utilized to ensure correct split of the libraries. Set the variable
## AUTO_PACKAGE_LIBS to a list of libraries (remove extensions), and a number
## of extra packages equal to the number of items in the list will be created.
## E.g. if having a package contains /usr/lib/libfoo.so and /usr/lib/libbar.so,
## the list would be AUTO_PACKAGE_LIBS = "foo bar". This will create 2
## additional packages named ${PN}-foo and ${PN}-bar that provides libfoo and
## libbar.
##
## @var AUTO_PACKAGE_LIBS Set to a list of libraries
## @var AUTO_PACKAGE_LIBS_DEPENDS Set to a common DEPEND for all libraries in
##      the list
## @var AUTO_PACKAGE_LIBS_RDEPENDS Set to a common RDEPEND for all libraries in
##      the list
## @var AUTO_PACKAGE_LIBDIR If having libraries an uncommen place, ensure that
##      path is in this variable.

PACKAGES =+ "${LIBS_AUTO_PACKAGES}"
PACKAGES[expand] = 3

# Default use-case is to package for HOST. If TARGET packaging is
# needed instead, override the variables below as needed (see
# fx. crosstool-ng/gcc-package.inc)

AUTO_PACKAGE_LIBS ?= ""
AUTO_PACKAGE_LIBS_LIBDIR ?= "${libdir} ${sharedlibdir}"
AUTO_PACKAGE_LIBS_PKGPREFIX ?= "lib"
AUTO_PACKAGE_LIBS_PROVIDEPREFIX ?= "lib"
AUTO_PACKAGE_LIBS_DEV_DEPENDS ?= ""
AUTO_PACKAGE_LIBS_DEV_RDEPENDS ?= ""
AUTO_PACKAGE_LIBS_DEPENDS ?= ""
AUTO_PACKAGE_LIBS_RDEPENDS ?= ""
AUTO_PACKAGE_LIBS_FILES ?= "${SOLIBS}"
AUTO_PACKAGE_LIBS_DEV_FILES ?= "${SOLIBSDEV},.la,.a"
AUTO_PACKAGE_LIBS_DEV_FILES:>HOST_OS_mingw32 = ",.def,.lib"

META_EMIT_PREFIX += "package:AUTO_PACKAGE_LIBS split:AUTO_PACKAGE_LIBS"

addhook auto_package_libs to post_recipe_parse before fixup_package_type before blacklist

def auto_package_libs (d):
    import warnings

    pn = d.get("PN")
    libs = (d.get("AUTO_PACKAGE_LIBS") or "").split()
    libdirs = (d.get("AUTO_PACKAGE_LIBS_LIBDIR") or "").split()
    libdirs = oelite.util.unique_list(libdirs)
    pkgprefix = d.get("AUTO_PACKAGE_LIBS_PKGPREFIX") or ""
    pcprefixes = (d.get("AUTO_PACKAGE_LIBS_PCPREFIX") or "").split()
    provideprefix = d.get("AUTO_PACKAGE_LIBS_PROVIDEPREFIX") or ""
    packages = []
    devpackages = []
    dev_depends = d.get("AUTO_PACKAGE_LIBS_DEV_DEPENDS") or ""
    dev_rdepends = d.get("AUTO_PACKAGE_LIBS_DEV_RDEPENDS") or ""

    def get_extra_files(pkg):
        #return (d.get("FILES_" + pkg) or "").split()
        files = d.get("FILES_" + pkg)
        if files is None:
            files = d.get("EXTRA_FILES_" + pkg)
            if files:
                warnings.warn(
                    "EXTRA_FILES_* is deprecated, use FILES_* instead")
        return (files or "").split()

    def split_libdir(libdir):
        libdir = libdir.split(":")
        if len(libdir) > 5:
            bb.fatal("invalid libdir in AUTO_PACKAGE_LIBS_LIBDIR: %s"%(libdir))
        if len(libdir) < 2:
            libdir.append("lib")
        if len(libdir) < 3:
            libdir.append([""])
        else:
            libdir[2] = libdir[2].split(",")
        if len(libdir) < 4:
            libdir.append(d.get("AUTO_PACKAGE_LIBS_FILES").split(","))
        else:
            libdir[3] = libdir[3].split(",")
        if len(libdir) < 5:
            libdir.append(d.get("AUTO_PACKAGE_LIBS_DEV_FILES").split(","))
        else:
            libdir[4] = libdir[4].split(",")
        return libdir

    for lib in libs:
        if ":" in lib:
            pkg, lib = lib.split(":", 1)
            pkg = "%s-%s%s"%(pn, pkgprefix, pkg.replace("_", "-").lower())
        else:
            pkg = "%s-%s%s"%(pn, pkgprefix, lib.replace("_", "-").lower())
        devpkg = pkg + "-dev"
        devpackages += [ devpkg ]
        packages += [ pkg ]

        files = []
        pkg_libsuffix = d.get("LIBSUFFIX_%s"%(pkg))
        for libdir in libdirs:
            (libdir, libprefix, libsuffixes, libexts, devlibexts) = \
                split_libdir(libdir)
            if pkg_libsuffix == "":
                libsuffixes = [""]
            elif pkg_libsuffix is not None:
                libsuffixes = pkg_libsuffix.split()
            for libsuffix in libsuffixes:
                libname = "%s%s%s"%(libprefix, lib, libsuffix)
                for libext in libexts:
                    files.append("%s/%s%s"%(libdir, libname, libext))
        files += get_extra_files(pkg)
        d.set("FILES_" + pkg, " ".join(files))

        files = []
        pkg_libsuffix = d.get("LIBSUFFIX_%s"%(devpkg))
        for libdir in libdirs:
            (libdir, libprefix, libsuffixes, libexts, devlibexts) = \
                split_libdir(libdir)
            if pkg_libsuffix == "":
                libsuffixes = [""]
            elif pkg_libsuffix is not None:
                libsuffixes = pkg_libsuffix.split()
            for libsuffix in libsuffixes:
                libname = "%s%s%s"%(libprefix, lib, libsuffix)
                for libext in devlibexts:
                    files.append("%s/%s%s"%(libdir, libname, libext))
                if pkg_libsuffix is None:
                    for pcprefix in pcprefixes or [""]:
                        pcfile = "${libdir}/pkgconfig/%s%s%s.pc"%(
                            pcprefix, lib, libsuffix)
                        if not pcfile in files:
                            files.append(pcfile)
        if pkg_libsuffix is not None:
            for pcprefix in pcprefixes or [""]:
                pcfile = "${libdir}/pkgconfig/%s%s%s.pc"%(
                    pcprefix, lib, pkg_libsuffix)
                if not pcfile in files:
                    files.append(pcfile)
        files += get_extra_files(devpkg)
        d.set("FILES_" + devpkg, " ".join(files))

        pkg_provides = (d.get("PROVIDES_" + pkg) or "").split()
        pkg_provides.append("%s%s"%(provideprefix,
                                    lib.replace("_", "-").lower()))
        d.set("PROVIDES_" + pkg, " ".join(pkg_provides))

        qaflags = (d.get_flag("PROVIDES_" + pkg,"qa") or "").split()
        qaflags.append("is-library")
        d.set_flag("PROVIDES_" + pkg, "qa", " ".join(qaflags))

        devpkg_provides = (d.get("PROVIDES_" + devpkg) or "").split()
        devpkg_provides.append("%s%s-dev"%(provideprefix,
                                           lib.replace("_", "-").lower()))
        d.set("PROVIDES_" + devpkg, " ".join(devpkg_provides))

        pkg_depends = (d.get("DEPENDS_" + pkg) or "").split()

        pkg_rdepends = d.get("RDEPENDS_" + pkg, True)
        if pkg_rdepends is None:
            pkg_rdepends = []
            for dep in pkg_depends:
                if dep.startswith("lib"):
                    pkg_rdepends.append(dep)
        else:
            pkg_rdepends = pkg_rdepends.split()
        pkg_rdepends.extend((d.get("AUTO_PACKAGE_LIBS_RDEPENDS") or "").split())
        d.set("RDEPENDS_" + pkg, " ".join(pkg_rdepends))

        pkg_depends.append("%s_${PV}"%(devpkg))
        pkg_depends.extend((d.get("AUTO_PACKAGE_LIBS_DEPENDS") or "").split())
        d.set("DEPENDS_" + pkg, " ".join(pkg_depends))

        devpkg_depends = (d.get("DEPENDS_" + devpkg) or "").split()
        devpkg_depends += dev_depends.split()
        d.set("DEPENDS_" + devpkg, " ".join(devpkg_depends))

        devpkg_rdepends = d.get("RDEPENDS_" + devpkg)
        if devpkg_rdepends is None:
            devpkg_rdepends = []
            for dep in pkg_rdepends:
                if dep.endswith("-dev"):
                    devpkg_rdepends.append(dep)
                else:
                    devpkg_rdepends.append(dep + "-dev")
        else:
            devpkg_rdepends = devpkg_rdepends.split()
        devpkg_rdepends.append("%s_${PV}"%(pkg))
        devpkg_rdepends += dev_rdepends.split()
        d.set("RDEPENDS_" + devpkg, " ".join(devpkg_rdepends))

    d.set("LIBS_AUTO_RPACKAGES", " ".join(packages))
    d.set("LIBS_AUTO_PACKAGES", " ".join(packages + devpackages))

# Local Variables:
# mode: python
# End:
