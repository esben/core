# -*- mode:python; -*-

inherit binconfig-stage
inherit libtool-stage
addtask stage

do_stage[cleandirs]	= "${STAGE_DIR} ${STAGE_DIR}.unpack"
do_stage[dirs]		= "${STAGE_DIR}"
do_stage[recdeptask]	= "DEPENDS:do_package"

do_stage[import] = "set_stage"
def do_stage(d):
    def get_dstdir(cwd, package):
        return os.path.join(cwd, package.type)
    return set_stage(d, "__stage", "STAGE_FIXUP_FUNCS", get_dstdir,
                     d.get("STAGE_DIR") + ".unpack")

set_stage[emit] += "do_stage"

def set_stage(d, stage, stage_fixup_funcs, get_dstdir, unpackdir):
    import tempfile
    from oelite.util import TarFile
    from oebakery import debug, info, warn, err, die

    cwd = os.getcwd()

    def update_file_priority(file_priorities, f, pkgname, dstdir):
        f = os.path.join("/", f)
        file_priority = None
        fpfn = os.path.join(dstdir, pkgmetadir, pkgname, "file_priority")
        if os.path.exists(fpfn):
            with open(fpfn) as fpfile:
                fps = fpfile.readline().strip()
            for fp in fps.split():
                fp = fp.rsplit(":", 1)
                if len(fp) == 1:
                    if file_priority is None:
                        file_priority = fp[0]
                else:
                    if f == fp[0]:
                        file_priority = fp[1]
            file_priority = int(file_priority)
        if file_priority is None:
            file_priority = 0
        try:
            file_priorities[file_priority].append(pkgname)
        except KeyError:
            file_priorities[file_priority] = [pkgname]
        return

    def file_in_tarball(f, tarfn):
        tf = TarFile(tarfn)
        try:
            return tf.getmember(f)
        except KeyError:
            return None

    stage = d.get(stage)
    stage_files = stage.keys()
    stage_files.sort()
    staged_packages = []
    for filename in stage_files:
        package = stage[filename]
        if not os.path.isfile(filename):
            die("could not find stage file: %s"%(filename))
        dstdir = get_dstdir(cwd, package)
        print "unpacking %s to %s"%(filename, unpackdir)
        bb.utils.mkdirhier(unpackdir)
        os.chdir(unpackdir)
        with TarFile(filename, debug=0, errorlevel=1) as tf:
            tf.extractall()

        d["STAGE_FIXUP_PKG_TYPE"] = package.type
        for funcname in (d.get(stage_fixup_funcs) or "").split():
            print "Running", stage_fixup_funcs, funcname
            function = d.get_function(funcname)
            if not function.run(unpackdir):
                return False
        del d["STAGE_FIXUP_PKG_TYPE"]

        bb.utils.mkdirhier(dstdir)

        pkgmetadir = d.get("pkgmetadir").lstrip("/")
        dst_pkgmetadir = os.path.join(dstdir, pkgmetadir, package.name)
        if os.path.exists(pkgmetadir):
            os.renames(pkgmetadir, dst_pkgmetadir)

        conflicts = False
        for root, dirs, files in os.walk("."):
            root = root[2:]
            merged_dirs = []
            for f in dirs:
                if root == "" and f == pkgmetadir:
                    dirs.remove(f)
                    continue
                srcfile = os.path.join(root, f)
                dstfile = os.path.join(dstdir, srcfile)
                if os.path.isdir(dstfile):
                    # FIXME: check if owner/group/perms match
                    #   on different owner/group/perms, check FILE_PRIORITY
                    #   vars if one of them should be preserved, and if not
                    #   fail out with a conflict
                    continue
                if os.path.exists(dstfile):
                    bb.error("file exist in stage: %s" % dstfile)
                    # FIXME: need more descriptive error message
                    conflicts = True
                os.renames(srcfile, dstfile)
                merged_dirs.append(f)
            dirs = list(set(dirs).difference(set(merged_dirs)))
            for f in files:
                srcfile = os.path.join(root, f)
                dstfile = os.path.join(dstdir, srcfile)
                if os.path.exists(dstfile):
                    file_priorities = {}
                    update_file_priority(file_priorities, srcfile,
                                         package.name, dstdir)

                    for (pkgtarfn, pkgname, pkgdstdir) in staged_packages:
                        if pkgdstdir != dstdir:
                            continue
                        if file_in_tarball(os.path.join(".", root, f),
                                           pkgtarfn):
                            update_file_priority(file_priorities, srcfile,
                                                 pkgname, pkgdstdir)

                    priority = None
                    priorities = file_priorities.keys()
                    if priorities:
                        priorities.sort()
                        priority = priorities[-1]
                    else:
                        bb.error("file conflict in stage (1): /%s"%(srcfile))
                        conflicts = True
                        continue
                    if len(file_priorities[priority]) != 1:
                        bb.error("file conflict in stage (2): /%s"%(srcfile))
                        conflicts = True
                        continue
                    bb.debug("priority overwrite of stage file: /%s"%(srcfile))
                    if file_priorities[priority][0] != package.name:
                        continue
                    print "overwriting with %s from %s"%(srcfile, package.name)

                # FIXME: check if owner/group/perms match
                os.renames(srcfile, dstfile)
        if conflicts:
            bb.fatal("file conflicts in stage")

        os.chdir(dstdir)
        shutil.rmtree(unpackdir)

        staged_packages.append((filename, package.name, dstdir))

STAGE_FIXUP_FUNCS ?= ""
