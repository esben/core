## Class for fixing up libtool control files upon installing
##
## When installing a libtool control file, it might contain absolute paths such
## as: -L/xxxxxx/. When using that libtool file in another recipe, that paths
## will not work. This class removes the paths, and works together with the
## libtool-stage class that handles libtool control files upon staging. Additionally
## this class ensures that the build libtool is used instead of e.g. a host
## libtool or a libtool supplied with the package source.
## As an example, take native:libffi:
## After compilation, libffi.la contains the following line:
## dependency_libs=' -L/oelite/tmp/work/native/x86_64-build_unknown-linux-gnu
## /libffi-3.0.12/stage/native/lib'
## After installing (and fixing using the libtool class):
## dependency_libs=' -L/lib'
## When using that library in stage (here for directfb), contents are now:
## dependency_libs=' -L/oelite/tmp/work/machine/
## arm-cortexa9neont-linux-gnueabi/directfb-1.4.15/stage/native/lib'

LIBTOOL_DEPENDS = "host-cross:libtool target-cross:libtool"
CLASS_DEPENDS += "${LIBTOOL_DEPENDS}"

# Libtool commands
BUILD_LIBTOOL	= "${BUILD_PREFIX}libtool"
HOST_LIBTOOL	= "${HOST_PREFIX}libtool"
TARGET_LIBTOOL	= "${TARGET_PREFIX}libtool"
LIBTOOL		= "${HOST_LIBTOOL}"
#export LIBTOOL

LIBTOOL_NATIVE_SCRIPTS				= ""
LIBTOOL_HOST_SCRIPTS				= ""
LIBTOOL_TARGET_SCRIPTS				= "libtool"

LIBTOOL_NATIVE_SCRIPTS:native			= "libtool"
LIBTOOL_TARGET_SCRIPTS:native			= ""

LIBTOOL_NATIVE_SCRIPT_FIXUP			= "0"
LIBTOOL_HOST_SCRIPT_FIXUP			= "0"
LIBTOOL_TARGET_SCRIPT_FIXUP			= "0"

libtool_script_fixup () {
    oenote "libtool_script_fixup"

    if [ "${LIBTOOL_NATIVE_SCRIPT_FIXUP}" = "1" ] ; then
        for script in ${LIBTOOL_NATIVE_SCRIPTS} ; do
            if [ -f $script ]; then
                rm -f $script
                ln -s \
                    ${STAGE_DIR}/native${stage_bindir}/libtool \
                    $script
            fi
        done
    fi

    if [ "${LIBTOOL_HOST_SCRIPT_FIXUP}" = "1" ] ; then
        for script in ${LIBTOOL_HOST_SCRIPTS} ; do
            if [ -f $script ]; then
                rm -f $script
                ln -s \
                    ${STAGE_DIR}/${HOST_CROSS}/${stage_bindir}/${HOST_LIBTOOL} \
                    $script
            fi
        done
    fi

    if [ "${LIBTOOL_TARGET_SCRIPT_FIXUP}" = "1" ] ; then
        for script in ${LIBTOOL_TARGET_SCRIPTS} ; do
            if [ -f $script ]; then
                rm -f $script
                ln -s \
                    ${STAGE_DIR}/${TARGET_CROSS}/${stage_bindir}/${TARGET_LIBTOOL} \
                    $script
            fi
        done
    fi
}


LIBTOOL_FIXUP_SEARCH_DIRS = "${D}${libdir} ${D}${base_libdir}"
LIBTOOL_FIXUP_STRIP_DIRS  = "${D} ${S} ${STAGE_DDIR}"
STAGE_DDIR = "${TARGET_SYSROOT}"
STAGE_DDIR:native = "${STAGE_DIR}/native"

# FIXME: figure out how to handle canadian-cross here...

do_install[postfuncs] += "do_install_libtool_lafile_fixup"
def do_install_libtool_lafile_fixup(d):
    lafiles = []
    for la_dir in d.getVar("LIBTOOL_FIXUP_SEARCH_DIRS", True).split():
        lafiles += glob.glob("%s/*.la"%(la_dir))
    strip_dirs = []
    def add_strip_dir(strip_dir):
        if not strip_dir in strip_dirs:
            strip_dirs.append(strip_dir)
    for strip_dir in d.getVar("LIBTOOL_FIXUP_STRIP_DIRS", True).split():
        add_strip_dir(strip_dir)
        add_strip_dir(os.path.realpath(strip_dir))
    for filename in lafiles:
        with open(filename, "r") as input_file:
            lafile = input_file.read()
        for strip_dir in strip_dirs:
            lafile = re.sub("-L%s"%(strip_dir),
                             "-L", lafile)
            lafile = re.sub("([' ])%s"%(strip_dir),
                             "\g<1>", lafile)
        pattern = re.compile("^installed=no", re.MULTILINE)
        lafile = re.sub(pattern, "installed=yes", lafile)
        with open(filename, "w") as output_file:
            output_file.write(lafile)

# Local Variables:
# mode: python
# End:
