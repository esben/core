## Class for fixing up libtool control files upon staging
##
## When staging a libtool control file, it might contain absolute paths such
## as: -L/xxxxxx/. See class @libtool for how they are removed upon install.
## This class ensures that the correct paths is inserted.
## As an example, take native:libffi:
## After compilation, libffi.la contains the following line:
## dependency_libs=' -L/oelite/tmp/work/native/x86_64-build_unknown-linux-gnu
## /libffi-3.0.12/stage/native/lib'
## After installing (and fixing using libtool class):
## dependency_libs=' -L/lib'
## When using that library in stage (here for directfb), contents are now:
## dependency_libs=' -L/oelite/tmp/work/machine/
## arm-cortexa9neont-linux-gnueabi/directfb-1.4.15/stage/native/lib'

STAGE_FIXUP_FUNCS += "libtool_stage_fixup"

def libtool_stage_fixup(d):
    stage_dir = os.path.realpath(d.getVar("STAGE_DIR", True))
    pkg_type = d.get("STAGE_FIXUP_PKG_TYPE")
    sysroot = os.path.join(stage_dir, pkg_type)
    recipe_type = d.get("RECIPE_TYPE")
    
    if pkg_type == "native":
        libdir = d.getVar("stage_libdir", True)
        base_libdir = d.getVar("stage_base_libdir", True)
    elif (pkg_type == "machine" or
          pkg_type == "sdk" and recipe_type in ("sdk", "sdk-cross")):
        libdir = d.getVar("target_libdir", True)
        base_libdir = d.getVar("target_base_libdir", True)
    else:
        libdir = d.getVar("libdir", True)
        base_libdir = d.getVar("base_libdir", True)
    
    lafiles = set(glob.glob("%s/*.la"%(libdir.lstrip("/")))).union(
                  glob.glob("%s/*.la"%(base_libdir.lstrip("/"))))
    for filename in lafiles:
        with open(filename, "r") as input_file:
            lafile = input_file.read()

        lafile = re.sub("/{2,}",
                        "/", lafile)
        lafile = re.sub(r"-L(%s|%s)(|32|64)"%(libdir, base_libdir),
                        r"-L%s\g<1>\g<2>"%(sysroot), lafile)
        lafile = re.sub(r"libdir='(%s|%s)(|32|64)'"%(libdir,base_libdir),
                        r"libdir='%s\g<2>\g<1>'"%(sysroot), lafile)
        lafile = re.sub(r"([' ])(%s|%s)(|32|64)"%(libdir, base_libdir),
                        r"\g<1>%s\g<2>\g<3>"%(sysroot), lafile)
        pattern = re.compile("^installed=no", re.MULTILINE)
        lafile = re.sub(pattern, "installed=yes", lafile)
        with open(filename, "w") as output_file:
            output_file.write(lafile)
        print "processed lafile", filename

# Local Variables:
# mode: python
# End:
