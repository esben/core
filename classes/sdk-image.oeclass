## Class for building sdk images.
##
## Highly usefull for building sdk-images. Has included fixes for non-static
## toolchains w.r.t. ensuring that the correct libraries are chosen when using
## binary tools.
##
## @var IMAGE_BASENAME Basename of the image generated.
## @var ARCHIVE_IMAGE_DIRNAME Directory name of the outputted sdk.
## @var IMAGE_PREPROCESS_NETFILTER Whether to remove double netfilter headers,
##      which is a problem on mingw. Disable by default, except on mingw,
##      where it is enabled.

RECIPE_TYPES ?= "canadian-cross"

inherit archive-image
IMAGE_BASENAME ?= "oe-lite-sdk-${HOST_ARCH}-${TARGET_ARCH}"
ARCHIVE_IMAGE_DIRNAME ?= "sdk"
ARCHIVE_IMAGE_FORMATS:HOST_OS_mingw32 = "zip"

IMAGE_PREPROCESS_NETFILTER = ""
IMAGE_PREPROCESS_NETFILTER:HOST_OS_mingw32 = "image_preprocess_linux_netfilter_headers"
IMAGE_PREPROCESS_FUNCS += "${IMAGE_PREPROCESS_NETFILTER}"

inherit elfwrapper
# image_preprocess_elf_sowrap is called in do_rstage, and needs chrpath from
# CLASS_DEPENDS, so rstage needs to have stage setup.
addtask rstage after stage
IMAGE_PREPROCESS_ELF_SOWRAP:USE_sdk_static = ""

image_preprocess_linux_netfilter_headers () {
	oenote image_preprocess_linux_netfilter_headers
	(
	cd ${TARGET_ARCH}/sysroot${target_includedir}/linux
	for f in netfilter*/*.h ; do
		fl=`echo $f | tr '[:upper:]' '[:lower:]'`
		if [ $fl != $f -a -f $fl ] ; then
			mv $f $f-case-conflict
		fi
	done
	)
}

IMAGE_PREPROCESS_FUNCS += "image_rm_sysroot_pkgmetadir"
image_rm_sysroot_pkgmetadir() {
    if [ "${IMAGE_PURGE_PKGMETADIR}" = "1" ] ; then
        rm -rf ${IMAGE_DIR}/${MACHINE_ARCH}/sysroot${pkgmetadir}
    fi
}

CLASS_RDEPENDS += "${RDEPENDS_SDK}"
RDEPENDS_SDK = " \
    gcc \
    target:libc-dev \
    target:libdl-dev \
    target:libpthread-dev \
    target:librt-dev \
    target:libgcc-dev \
    target:libm-dev \
    target:libutil-dev \
    target:libcrypt-dev \
    target:libresolv-dev \
    ${RDEPENDS_SDK_LIBC_EXTRA} \
"
RDEPENDS_SDK_LIBC_EXTRA = "target:libnss-files-dev target:libnss-dns-dev"
RDEPENDS_SDK_LIBC_EXTRA:TARGET_LIBC_uclibc = ""

CLASS_FLAGS += "sdk_cxx"
DEFAULT_USE_sdk_cxx = "1"
RDEPENDS_SDK += "${RDEPENDS_SDK_CXX}"
RDEPENDS_SDK_CXX = ""
RDEPENDS_SDK_CXX:USE_sdk_cxx = "gcc-g++ target:libstdc++-dev"

CLASS_FLAGS += "sdk_gdb"
DEFAULT_USE_sdk_gdb = "1"
RDEPENDS_SDK += "${RDEPENDS_SDK_GDB}"
RDEPENDS_SDK_GDB = ""
RDEPENDS_SDK_GDB:USE_sdk_gdb = "gdb"

CLASS_FLAGS += "sdk_uboot_mkimage"
DEFAULT_USE_sdk_uboot_mkimage = "1"
RDEPENDS_SDK += "${RDEPENDS_SDK_UBOOT_MKIMAGE}"
RDEPENDS_SDK_UBOOT_MKIMAGE = ""
RDEPENDS_SDK_UBOOT_MKIMAGE:USE_sdk_uboot_mkimage = "${UBOOT_MKIMAGE}"
UBOOT_MKIMAGE = "host:u-boot-tools-mkimage"
UBOOT_MKIMAGE:HOST_OS_mingw32 = ""

CLASS_FLAGS += "sdk_archive_formats sdk_archive_tar_ext"
DEFAULT_USE_sdk_archive_formats = "tar"
DEFAULT_USE_sdk_archive_tar_ext = "tar.gz"
ARCHIVE_IMAGE_FORMATS = "${USE_sdk_archive_formats}"
ARCHIVE_IMAGE_DIRNAME = ""
ARCHIVE_IMAGE_TAR_EXT = "${USE_sdk_archive_tar_ext}"

PROVIDES_${PN} = "sdk"

# Local Variables:
# mode: python
# End:
