# -*- mode:python; -*-

DESCRIPTION ?= "Linux kernel"
LICENSE ?= "GPL"

RECIPE_TYPES = "machine"
COMPATIBLE_MACHINES = ".*"

require conf/kernel.conf

inherit kernel-common kernel-modules-strip

EXTRA_OEMAKE += "CROSS_COMPILE=${TARGET_PREFIX}"

CLASS_FLAGS += "kernel_defconfig"
DEFCONFIG_FILE ?= "${SRCDIR}/defconfig"
DEFCONFIG = "${USE_kernel_defconfig}"
DEFCONFIG[expand] = 3

CLASS_FLAGS += "kernel_initramfs"
CLASS_DEPENDS:>USE_kernel_initramfs = " initramfs"
KERNEL_INITRAMFS ?= "${MACHINE_SYSROOT}${bootdir}/initramfs.cpio"
USE_KERNEL_INITRAMFS = "${USE_kernel_initramfs}"
USE_KERNEL_INITRAMFS[expand] = "3"

do_configure_kernel () {
	if [ -e "${DEFCONFIG_FILE}" ]; then
		cp "${DEFCONFIG_FILE}" "${S}/.config"
		yes '' | oe_runmake oldconfig
	else
		if [ -n "${DEFCONFIG}" ] ; then
			oe_runmake ${DEFCONFIG}
		else
			die "No default configuration for ${MACHINE} available."
		fi
	fi
	if [ -n "${USE_KERNEL_INITRAMFS}" ] ; then
		echo 'CONFIG_INITRAMFS_SOURCE="${KERNEL_INITRAMFS}"' \
			>> ${S}/.config
		yes '' | oe_runmake oldconfig
	fi
}

do_configure () {
	do_configure_kernel
}

export BUILD_TAG

do_compile_kernel () {
	if [ -n "$BUILD_TAG" ]; then
		export KBUILD_BUILD_VERSION="$BUILD_TAG"
	fi

	oe_runmake include/linux/version.h
	oe_runmake ${USE_kernel_imagetype}

	if (grep -q -i -e '^CONFIG_MODULES=y$' .config); then
		oe_runmake modules
	else
		oenote "no modules to compile"
	fi

	# Check if scripts/genksyms exists and if so, build it
	if [ -e scripts/genksyms/ ]; then
		oe_runmake SUBDIRS="scripts/genksyms"
	fi
}

do_compile[postfuncs] = "${KERNEL_COMPILE_POSTFUNCS}"
KERNEL_COMPILE_POSTFUNCS = ""
do_compile () {
	do_compile_kernel
}

CLASS_DEPENDS += "${KERNEL_UIMAGE_DEPENDS}"
KERNEL_UIMAGE_DEPENDS = "${@['', 'native:u-boot-tools-mkimage']['${USE_kernel_imagetype}' == 'uImage']}"

CLASS_FLAGS += "kernel_uimage \
    kernel_uimage_entrypoint kernel_uimage_loadaddress kernel_uimage_name"
KERNEL_UIMAGE_DEPENDS:USE_kernel_uimage = "native:u-boot-tools-mkimage"
DEFAULT_USE_kernel_uimage = "0"
DEFAULT_USE_kernel_uimage_entrypoint = "20008000"
DEFAULT_USE_kernel_uimage_loadaddress = "${USE_kernel_uimage_entrypoint}"
DEFAULT_USE_kernel_uimage_name = "${DISTRO}/${PV}/${MACHINE}"

KERNEL_COMPILE_POSTFUNCS:>USE_kernel_uimage = " do_compile_kernel_uimage"
do_compile_kernel_uimage() {
    ENTRYPOINT=${USE_kernel_uimage_entrypoint}
    if [ -n "$UBOOT_ENTRYSYMBOL" ] ; then
        ENTRYPOINT=`${HOST_PREFIX}nm ${S}/vmlinux | \
            awk '$3=="${USE_kernel_uimage_entrypoint}" {print $1}'`
    fi

    if [ -e "arch/${KERNEL_ARCH}/boot/compressed/vmlinux" ] ; then
	${OBJCOPY} -O binary -R .note -R .comment \
	-S arch/${KERNEL_ARCH}/boot/compressed/vmlinux linux.bin
	mkimage -A ${UBOOT_ARCH} -O linux -T kernel -C none \
	-a ${USE_kernel_uimage_loadaddress} \
	-e $ENTRYPOINT \
	-n ${USE_kernel_uimage_name} \
	-d linux.bin arch/${KERNEL_ARCH}/boot/uImage
	rm -f linux.bin

    else
	${OBJCOPY} -O binary -R .note -R .comment -S vmlinux linux.bin
	rm -f linux.bin.gz
	gzip -9 linux.bin
	mkimage -A ${UBOOT_ARCH} -O linux -T kernel -C gzip \
	-a ${USE_kernel_uimage_loadaddress} \
	-e $ENTRYPOINT \
	-n ${USE_kernel_uimage_name} \
	-d linux.bin.gz arch/${KERNEL_ARCH}/boot/uImage
	rm -f linux.bin.gz
    fi
}

UIMAGE_KERNEL_OUTPUT = ""
UIMAGE_KERNEL_OUTPUT:USE_kernel_uimage = "arch/${KERNEL_ARCH}/boot/uImage"
KERNEL_OUTPUT += "${UIMAGE_KERNEL_OUTPUT}"

CLASS_FLAGS += "kernel_dtb kernel_dtc kernel_dtc_flags kernel_dtc_source"
DEFAULT_USE_kernel_dtc_flags = "-R 8 -p 0x3000"
DEFAULT_USE_kernel_dtc_source = "arch/${KERNEL_ARCH}/boot/dts/${MACHINE}.dts"

addhook kernel_devicetree_init to post_recipe_parse after set_useflags
def kernel_devicetree_init(d):
    kernel_dtc = d.get('USE_kernel_dtc')
    kernel_dtb = d.get('USE_kernel_dtb')
    if kernel_dtc and kernel_dtc != 0:
	kernel_dtc_source = d.get('USE_kernel_dtc_source')
	dts = os.path.basename(kernel_dtc_source)
	(dts_name, dts_ext) = os.path.splitext(dts)
	if dts_ext != '.dts':
	    dts_name = dts
	d.set('KERNEL_DEVICETREE', dts_name + ".dtb")
    elif kernel_dtb:
	d.set('KERNEL_DEVICETREE', kernel_dtb)
    else:
	d.set('KERNEL_DEVICETREE', '')

KERNEL_COMPILE_POSTFUNCS:>USE_kernel_dtc = " do_compile_kernel_dtc"
do_compile_kernel_dtc() {
    scripts/dtc/dtc -I dts -O dtb ${USE_kernel_dtc_flags} \
	-o ${KERNEL_DEVICETREE} ${USE_kernel_dtc_source}
}

do_install_kernel () {
    install -d ${D}${bootdir}
    install -m 0644 ${KERNEL_IMAGE} ${D}${bootdir}/${KERNEL_IMAGE_FILENAME}

    if [ -n "${KERNEL_DEVICETREE}" ] ; then
	install -m 0644 ${KERNEL_DEVICETREE} ${D}${bootdir}/${KERNEL_DEVICETREE_FILENAME}
    fi

    if (grep -q -i -e '^CONFIG_MODULES=y$' .config); then
	oe_runmake DEPMOD=echo INSTALL_MOD_PATH="${D}" modules_install
	rm ${D}/lib/modules/*/build ${D}/lib/modules/*/source
    else
	oenote "no modules to install"
    fi

    for kernel_output in ${KERNEL_OUTPUT} ; do
	install -m 0644 $kernel_output ${D}${bootdir}/
    done
    install -m 0644 .config ${D}${bootdir}/config

    install -d ${D}${kernelsrcdir}
    for dir in scripts include ; do
        cp -fR $dir ${D}${kernelsrcdir}/
    done
    for file in Makefile .config Module.symvers System.map ; do
        cp -f $file ${D}${kernelsrcdir}
    done
    mkdir -p ${D}${kernelsrcdir}/arch/${KERNEL_ARCH}
    cp -fR arch/${KERNEL_ARCH}/lib ${D}${kernelsrcdir}/arch/${KERNEL_ARCH}
    cp -fR arch/${KERNEL_ARCH}/include ${D}${kernelsrcdir}/arch/${KERNEL_ARCH}
    cp -fR arch/${KERNEL_ARCH}/Makefile ${D}${kernelsrcdir}/arch/${KERNEL_ARCH}
    #find ${D}${kernelsrcdir}/ \( -name \*.o -o -name .\*.cmd \) -exec rm {} \;

    do_install_kernel_headers
}

INSTALL_HDR_PATH ?= "${D}${includedir}/.."

do_install_kernel_headers () {
    mkdir -p ${D}${includedir}
    oe_runmake INSTALL_HDR_PATH="${INSTALL_HDR_PATH}" headers_install
}

do_install () {
    do_install_kernel
}

PACKAGES = "${PN} ${PN}-vmlinux ${PN}-dev ${PN}-headers ${PN}-modules ${PN}-dtb ${PN}-firmware"

FILES_${PN} = "${bootdir}/${KERNEL_IMAGE_FILENAME}"
FILES_${PN}-dtb = "${bootdir}/${KERNEL_DEVICETREE_FILENAME}"
FILES_${PN}-vmlinux = "${bootdir}/vmlinux"
FILES_${PN}-dev = "${bootdir}/System.map ${bootdir}/Module.symvers \
    ${bootdir}/config ${kernelsrcdir}"

FILES_${PN}-headers = "${includedir}"
FILES_${PN}-modules = "/lib/modules"
FILES_${PN}-firmware = "/lib/firmware"

PROVIDES_${PN} = "kernel"
PROVIDES_${PN}-modules = "kernel-modules"
PROVIDES_${PN}-dev = "kernel-dev"

DEPENDS_${PN}-dev = ""

# FIXME: implement auto-package-kernel-modules.oeclass to split out
# modules into separate packages

# Support checking the kernel size since some kernels need to reside
# in partitions with a fixed length or there is a limit in
# transferring the kernel to memory
inherit sizecheck
KERNEL_SIZECHECK = ""
KERNEL_SIZECHECK:USE_kernel_maxsize = "${KERNEL_IMAGE}:${USE_kernel_maxsize}"
SIZECHECK += "${KERNEL_SIZECHECK}"

addtask deploy after install before build
do_deploy[dirs] = "${IMAGE_DEPLOY_DIR} ${S}"

do_deploy() {
    install -m 0644 ${KERNEL_IMAGE} \
	${IMAGE_DEPLOY_DIR}/${KERNEL_IMAGE_DEPLOY_FILE}
    md5sum <${KERNEL_IMAGE} \
	>${IMAGE_DEPLOY_DIR}/${KERNEL_IMAGE_DEPLOY_FILE}.md5

    if [ -n "${KERNEL_DEVICETREE}" ] ; then
	install -m 0644 "${KERNEL_DEVICETREE}" \
	    ${IMAGE_DEPLOY_DIR}/${KERNEL_DEVICETREE_DEPLOY_FILE}
	md5sum <"${KERNEL_DEVICETREE}" \
	    >${IMAGE_DEPLOY_DIR}/${KERNEL_DEVICETREE_DEPLOY_FILE}.md5
    fi

    cd ${IMAGE_DEPLOY_DIR}
    if [ -n "${KERNEL_IMAGE_DEPLOY_LINK}" ] ; then
	for ext in "" ".md5"; do
	    rm -f  ${KERNEL_IMAGE_DEPLOY_LINK}$ext
	    ln -sf ${KERNEL_IMAGE_DEPLOY_FILE}$ext \
		   ${KERNEL_IMAGE_DEPLOY_LINK}$ext
	done
    fi
    if [ -n "${KERNEL_DEVICETREE}" -a \
	 -n "${KERNEL_DEVICETREE_DEPLOY_LINK}" ] ; then
	for ext in "" ".md5"; do
	    rm -f  ${KERNEL_DEVICETREE_DEPLOY_LINK}$ext
	    ln -sf ${KERNEL_DEVICETREE_DEPLOY_FILE}$ext \
		   ${KERNEL_DEVICETREE_DEPLOY_LINK}$ext
	done
    fi
}
