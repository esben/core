# -*- mode:python; -*-
DESCRIPTION ?= "Das U-Boot -- the Universal Boot Loader"
HOMEPAGE ?= "http://www.denx.de/wiki/U-Boot"
LICENSE ?= "GPL"

require conf/u-boot.conf

RECIPE_TYPES = "machine"

inherit c make kernel-arch

CLASS_DEPENDS += "native:u-boot-tools-mkimage"

# Why bother?  U-Boot will most likely stay broken for parallel builds
PARALLEL_MAKE = ""

EXTRA_OEMAKE = "${EXTRA_OEMAKE_ARCH} CROSS_COMPILE=${TARGET_PREFIX}"
EXTRA_OEMAKE_ARCH ?= "ARCH=${KERNEL_ARCH}"

CFLAGS[unexport]   = "1"
CPPFLAGS[unexport] = "1"
LDFLAGS[unexport]  = "1"

do_configure[prefuncs] += "${DO_CONFIGURE_EXTRAENV}"
DO_CONFIGURE_EXTRAENV = ""
DO_CONFIGURE_EXTRAENV:USE_uboot_extra_env = "do_configure_extraenv"
def do_configure_extraenv(d):
    config_filename = os.path.join("include/configs",
                                   d.get("USE_uboot_config_file"))
    extra_env_lines = []
    for line in (d.get("USE_uboot_extra_env").splitlines()):
        line = line.strip()
        if not line:
            continue
        extra_env_lines.append('\t"%s\\0"'%(line,))
    with open(config_filename) as config_file:
        config = config_file.read()
    # Search to the CONFIG_EXTRA_ENV_SETTINGS define
    define = re.search(r"^#define[ \t]+CONFIG_EXTRA_ENV_SETTINGS[ \t]+",
                       config, re.MULTILINE)
    if not define:
        print "ERROR: cannot find CONFIG_EXTRA_ENV_SETTINGS in %s"%(
            config_filename)
        return False
    # Get the current define value
    current = re.match(r"([^\n]*\\\n)*([^\n]*\n)",
                       config[define.end():])
    last_line = config[define.end()+current.start(2):
                           define.end()+current.end(2)].strip()
    # Write out config file with USE_uboot_extra_env inserted
    with open(config_filename, "w") as config_file:
        config_file.write(config[:define.end() + current.end(1)])
        if last_line:
            config_file.write(config[define.end() + current.start(2):
                                         define.end() + current.end(2) - 1] +
                              " \\\n")
        config_file.write(" \\\n".join(extra_env_lines) + "\n")
        if last_line:
            config_file.write(config[define.end() + current.end(2):])
        else:
            config_file.write(config[define.end() + current.start(2):])
    return True

do_configure () {
    oe_runmake ${USE_uboot_config}
}

do_compile () {
    oe_runmake ${UBOOT_IMAGE}
}

# Support checking the u-boot image size
inherit sizecheck
UBOOT_SIZECHECK = ""
UBOOT_SIZECHECK:USE_uboot_maxsize = "${UBOOT_IMAGE}:${USE_uboot_maxsize}"
SIZECHECK += "${UBOOT_SIZECHECK}"

do_install () {
    install -d ${D}${bootdir}
    install -m 0644 ${UBOOT_IMAGE} ${D}${bootdir}
    install -m 0644 ${UBOOT_IMAGE_BASE} ${D}${bootdir}
}

PACKAGES = "${PN} ${PN}-elf"
FILES_${PN} = "${bootdir}/${UBOOT_IMAGE_FILENAME}"
FILES_${PN}-elf = "${bootdir}/${UBOOT_IMAGE_BASE}"

PROVIDES_${PN} = "u-boot"
PROVIDES_${PN}-elf = "u-boot-elf"

addtask deploy before build after compile
do_deploy[dirs] = "${IMAGE_DEPLOY_DIR} ${S}"

do_deploy () {
    install -m 0644 ${UBOOT_IMAGE} \
	${IMAGE_DEPLOY_DIR}/${UBOOT_IMAGE_DEPLOY_FILE}
    md5sum <${UBOOT_IMAGE} \
	>${IMAGE_DEPLOY_DIR}/${UBOOT_IMAGE_DEPLOY_FILE}.md5

    cd ${IMAGE_DEPLOY_DIR}
    if [ -n "${UBOOT_IMAGE_DEPLOY_LINK}" ] ; then
	for ext in "" ".md5"; do
	    rm -f  ${UBOOT_IMAGE_DEPLOY_LINK}$ext
	    ln -sf ${UBOOT_IMAGE_DEPLOY_FILE}$ext \
		   ${UBOOT_IMAGE_DEPLOY_LINK}$ext
	done
    fi
}
